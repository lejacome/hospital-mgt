<?php

/**
 * Base class that represents a row from the 'employee' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * 05/17/11 06:29:51
 *
 * @package    lib.model.om
 */
abstract class BaseEmployee extends BaseObject  implements Persistent {


  const PEER = 'EmployeePeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        EmployeePeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the department_id field.
	 * @var        int
	 */
	protected $department_id;

	/**
	 * The value for the designation_id field.
	 * @var        int
	 */
	protected $designation_id;

	/**
	 * The value for the emp_category field.
	 * @var        string
	 */
	protected $emp_category;

	/**
	 * The value for the name field.
	 * @var        string
	 */
	protected $name;

	/**
	 * The value for the cnic field.
	 * @var        string
	 */
	protected $cnic;

	/**
	 * The value for the dob field.
	 * @var        string
	 */
	protected $dob;

	/**
	 * The value for the gender field.
	 * @var        string
	 */
	protected $gender;

	/**
	 * The value for the mail_address field.
	 * @var        string
	 */
	protected $mail_address;

	/**
	 * The value for the contact_res field.
	 * @var        string
	 */
	protected $contact_res;

	/**
	 * The value for the contact_cell field.
	 * @var        string
	 */
	protected $contact_cell;

	/**
	 * The value for the contact_off field.
	 * @var        string
	 */
	protected $contact_off;

	/**
	 * The value for the emergency_contact field.
	 * @var        string
	 */
	protected $emergency_contact;

	/**
	 * The value for the employment_date field.
	 * @var        string
	 */
	protected $employment_date;

	/**
	 * The value for the local_resident field.
	 * @var        string
	 */
	protected $local_resident;

	/**
	 * The value for the qualification field.
	 * @var        string
	 */
	protected $qualification;

	/**
	 * The value for the status field.
	 * @var        string
	 */
	protected $status;

	/**
	 * The value for the created_at field.
	 * @var        string
	 */
	protected $created_at;

	/**
	 * The value for the updated_at field.
	 * @var        string
	 */
	protected $updated_at;

	/**
	 * @var        Department
	 */
	protected $aDepartment;

	/**
	 * @var        Designation
	 */
	protected $aDesignation;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BaseEmployee object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [department_id] column value.
	 * 
	 * @return     int
	 */
	public function getDepartmentId()
	{
		return $this->department_id;
	}

	/**
	 * Get the [designation_id] column value.
	 * 
	 * @return     int
	 */
	public function getDesignationId()
	{
		return $this->designation_id;
	}

	/**
	 * Get the [emp_category] column value.
	 * 
	 * @return     string
	 */
	public function getEmpCategory()
	{
		return $this->emp_category;
	}

	/**
	 * Get the [name] column value.
	 * 
	 * @return     string
	 */
	public function getName()
	{
		return $this->name;
	}

	/**
	 * Get the [cnic] column value.
	 * 
	 * @return     string
	 */
	public function getCnic()
	{
		return $this->cnic;
	}

	/**
	 * Get the [optionally formatted] temporal [dob] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDob($format = 'Y-m-d')
	{
		if ($this->dob === null) {
			return null;
		}


		if ($this->dob === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->dob);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->dob, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [gender] column value.
	 * 
	 * @return     string
	 */
	public function getGender()
	{
		return $this->gender;
	}

	/**
	 * Get the [mail_address] column value.
	 * 
	 * @return     string
	 */
	public function getMailAddress()
	{
		return $this->mail_address;
	}

	/**
	 * Get the [contact_res] column value.
	 * 
	 * @return     string
	 */
	public function getContactRes()
	{
		return $this->contact_res;
	}

	/**
	 * Get the [contact_cell] column value.
	 * 
	 * @return     string
	 */
	public function getContactCell()
	{
		return $this->contact_cell;
	}

	/**
	 * Get the [contact_off] column value.
	 * 
	 * @return     string
	 */
	public function getContactOff()
	{
		return $this->contact_off;
	}

	/**
	 * Get the [emergency_contact] column value.
	 * 
	 * @return     string
	 */
	public function getEmergencyContact()
	{
		return $this->emergency_contact;
	}

	/**
	 * Get the [optionally formatted] temporal [employment_date] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getEmploymentDate($format = 'Y-m-d')
	{
		if ($this->employment_date === null) {
			return null;
		}


		if ($this->employment_date === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->employment_date);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->employment_date, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [local_resident] column value.
	 * 
	 * @return     string
	 */
	public function getLocalResident()
	{
		return $this->local_resident;
	}

	/**
	 * Get the [qualification] column value.
	 * 
	 * @return     string
	 */
	public function getQualification()
	{
		return $this->qualification;
	}

	/**
	 * Get the [status] column value.
	 * 
	 * @return     string
	 */
	public function getStatus()
	{
		return $this->status;
	}

	/**
	 * Get the [optionally formatted] temporal [created_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getCreatedAt($format = 'Y-m-d')
	{
		if ($this->created_at === null) {
			return null;
		}


		if ($this->created_at === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->created_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [updated_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getUpdatedAt($format = 'Y-m-d')
	{
		if ($this->updated_at === null) {
			return null;
		}


		if ($this->updated_at === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->updated_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->updated_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = EmployeePeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [department_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setDepartmentId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->department_id !== $v) {
			$this->department_id = $v;
			$this->modifiedColumns[] = EmployeePeer::DEPARTMENT_ID;
		}

		if ($this->aDepartment !== null && $this->aDepartment->getId() !== $v) {
			$this->aDepartment = null;
		}

		return $this;
	} // setDepartmentId()

	/**
	 * Set the value of [designation_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setDesignationId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->designation_id !== $v) {
			$this->designation_id = $v;
			$this->modifiedColumns[] = EmployeePeer::DESIGNATION_ID;
		}

		if ($this->aDesignation !== null && $this->aDesignation->getId() !== $v) {
			$this->aDesignation = null;
		}

		return $this;
	} // setDesignationId()

	/**
	 * Set the value of [emp_category] column.
	 * 
	 * @param      string $v new value
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setEmpCategory($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->emp_category !== $v) {
			$this->emp_category = $v;
			$this->modifiedColumns[] = EmployeePeer::EMP_CATEGORY;
		}

		return $this;
	} // setEmpCategory()

	/**
	 * Set the value of [name] column.
	 * 
	 * @param      string $v new value
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->name !== $v) {
			$this->name = $v;
			$this->modifiedColumns[] = EmployeePeer::NAME;
		}

		return $this;
	} // setName()

	/**
	 * Set the value of [cnic] column.
	 * 
	 * @param      string $v new value
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setCnic($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cnic !== $v) {
			$this->cnic = $v;
			$this->modifiedColumns[] = EmployeePeer::CNIC;
		}

		return $this;
	} // setCnic()

	/**
	 * Sets the value of [dob] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setDob($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->dob !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->dob !== null && $tmpDt = new DateTime($this->dob)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->dob = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = EmployeePeer::DOB;
			}
		} // if either are not null

		return $this;
	} // setDob()

	/**
	 * Set the value of [gender] column.
	 * 
	 * @param      string $v new value
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setGender($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->gender !== $v) {
			$this->gender = $v;
			$this->modifiedColumns[] = EmployeePeer::GENDER;
		}

		return $this;
	} // setGender()

	/**
	 * Set the value of [mail_address] column.
	 * 
	 * @param      string $v new value
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setMailAddress($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->mail_address !== $v) {
			$this->mail_address = $v;
			$this->modifiedColumns[] = EmployeePeer::MAIL_ADDRESS;
		}

		return $this;
	} // setMailAddress()

	/**
	 * Set the value of [contact_res] column.
	 * 
	 * @param      string $v new value
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setContactRes($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->contact_res !== $v) {
			$this->contact_res = $v;
			$this->modifiedColumns[] = EmployeePeer::CONTACT_RES;
		}

		return $this;
	} // setContactRes()

	/**
	 * Set the value of [contact_cell] column.
	 * 
	 * @param      string $v new value
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setContactCell($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->contact_cell !== $v) {
			$this->contact_cell = $v;
			$this->modifiedColumns[] = EmployeePeer::CONTACT_CELL;
		}

		return $this;
	} // setContactCell()

	/**
	 * Set the value of [contact_off] column.
	 * 
	 * @param      string $v new value
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setContactOff($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->contact_off !== $v) {
			$this->contact_off = $v;
			$this->modifiedColumns[] = EmployeePeer::CONTACT_OFF;
		}

		return $this;
	} // setContactOff()

	/**
	 * Set the value of [emergency_contact] column.
	 * 
	 * @param      string $v new value
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setEmergencyContact($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->emergency_contact !== $v) {
			$this->emergency_contact = $v;
			$this->modifiedColumns[] = EmployeePeer::EMERGENCY_CONTACT;
		}

		return $this;
	} // setEmergencyContact()

	/**
	 * Sets the value of [employment_date] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setEmploymentDate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->employment_date !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->employment_date !== null && $tmpDt = new DateTime($this->employment_date)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->employment_date = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = EmployeePeer::EMPLOYMENT_DATE;
			}
		} // if either are not null

		return $this;
	} // setEmploymentDate()

	/**
	 * Set the value of [local_resident] column.
	 * 
	 * @param      string $v new value
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setLocalResident($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->local_resident !== $v) {
			$this->local_resident = $v;
			$this->modifiedColumns[] = EmployeePeer::LOCAL_RESIDENT;
		}

		return $this;
	} // setLocalResident()

	/**
	 * Set the value of [qualification] column.
	 * 
	 * @param      string $v new value
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setQualification($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->qualification !== $v) {
			$this->qualification = $v;
			$this->modifiedColumns[] = EmployeePeer::QUALIFICATION;
		}

		return $this;
	} // setQualification()

	/**
	 * Set the value of [status] column.
	 * 
	 * @param      string $v new value
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setStatus($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->status !== $v) {
			$this->status = $v;
			$this->modifiedColumns[] = EmployeePeer::STATUS;
		}

		return $this;
	} // setStatus()

	/**
	 * Sets the value of [created_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setCreatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->created_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->created_at = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = EmployeePeer::CREATED_AT;
			}
		} // if either are not null

		return $this;
	} // setCreatedAt()

	/**
	 * Sets the value of [updated_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setUpdatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->updated_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->updated_at !== null && $tmpDt = new DateTime($this->updated_at)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->updated_at = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = EmployeePeer::UPDATED_AT;
			}
		} // if either are not null

		return $this;
	} // setUpdatedAt()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array())) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->department_id = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->designation_id = ($row[$startcol + 2] !== null) ? (int) $row[$startcol + 2] : null;
			$this->emp_category = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->name = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->cnic = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->dob = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->gender = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->mail_address = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->contact_res = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->contact_cell = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->contact_off = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->emergency_contact = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->employment_date = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->local_resident = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->qualification = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->status = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->created_at = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->updated_at = ($row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 19; // 19 = EmployeePeer::NUM_COLUMNS - EmployeePeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Employee object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aDepartment !== null && $this->department_id !== $this->aDepartment->getId()) {
			$this->aDepartment = null;
		}
		if ($this->aDesignation !== null && $this->designation_id !== $this->aDesignation->getId()) {
			$this->aDesignation = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(EmployeePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = EmployeePeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aDepartment = null;
			$this->aDesignation = null;
		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseEmployee:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(EmployeePeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			EmployeePeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseEmployee:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseEmployee:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


    if ($this->isNew() && !$this->isColumnModified(EmployeePeer::CREATED_AT))
    {
      $this->setCreatedAt(time());
    }

    if ($this->isModified() && !$this->isColumnModified(EmployeePeer::UPDATED_AT))
    {
      $this->setUpdatedAt(time());
    }

		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(EmployeePeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseEmployee:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			EmployeePeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aDepartment !== null) {
				if ($this->aDepartment->isModified() || $this->aDepartment->isNew()) {
					$affectedRows += $this->aDepartment->save($con);
				}
				$this->setDepartment($this->aDepartment);
			}

			if ($this->aDesignation !== null) {
				if ($this->aDesignation->isModified() || $this->aDesignation->isNew()) {
					$affectedRows += $this->aDesignation->save($con);
				}
				$this->setDesignation($this->aDesignation);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = EmployeePeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = EmployeePeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += EmployeePeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aDepartment !== null) {
				if (!$this->aDepartment->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aDepartment->getValidationFailures());
				}
			}

			if ($this->aDesignation !== null) {
				if (!$this->aDesignation->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aDesignation->getValidationFailures());
				}
			}


			if (($retval = EmployeePeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = EmployeePeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getDepartmentId();
				break;
			case 2:
				return $this->getDesignationId();
				break;
			case 3:
				return $this->getEmpCategory();
				break;
			case 4:
				return $this->getName();
				break;
			case 5:
				return $this->getCnic();
				break;
			case 6:
				return $this->getDob();
				break;
			case 7:
				return $this->getGender();
				break;
			case 8:
				return $this->getMailAddress();
				break;
			case 9:
				return $this->getContactRes();
				break;
			case 10:
				return $this->getContactCell();
				break;
			case 11:
				return $this->getContactOff();
				break;
			case 12:
				return $this->getEmergencyContact();
				break;
			case 13:
				return $this->getEmploymentDate();
				break;
			case 14:
				return $this->getLocalResident();
				break;
			case 15:
				return $this->getQualification();
				break;
			case 16:
				return $this->getStatus();
				break;
			case 17:
				return $this->getCreatedAt();
				break;
			case 18:
				return $this->getUpdatedAt();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = EmployeePeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getDepartmentId(),
			$keys[2] => $this->getDesignationId(),
			$keys[3] => $this->getEmpCategory(),
			$keys[4] => $this->getName(),
			$keys[5] => $this->getCnic(),
			$keys[6] => $this->getDob(),
			$keys[7] => $this->getGender(),
			$keys[8] => $this->getMailAddress(),
			$keys[9] => $this->getContactRes(),
			$keys[10] => $this->getContactCell(),
			$keys[11] => $this->getContactOff(),
			$keys[12] => $this->getEmergencyContact(),
			$keys[13] => $this->getEmploymentDate(),
			$keys[14] => $this->getLocalResident(),
			$keys[15] => $this->getQualification(),
			$keys[16] => $this->getStatus(),
			$keys[17] => $this->getCreatedAt(),
			$keys[18] => $this->getUpdatedAt(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = EmployeePeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setDepartmentId($value);
				break;
			case 2:
				$this->setDesignationId($value);
				break;
			case 3:
				$this->setEmpCategory($value);
				break;
			case 4:
				$this->setName($value);
				break;
			case 5:
				$this->setCnic($value);
				break;
			case 6:
				$this->setDob($value);
				break;
			case 7:
				$this->setGender($value);
				break;
			case 8:
				$this->setMailAddress($value);
				break;
			case 9:
				$this->setContactRes($value);
				break;
			case 10:
				$this->setContactCell($value);
				break;
			case 11:
				$this->setContactOff($value);
				break;
			case 12:
				$this->setEmergencyContact($value);
				break;
			case 13:
				$this->setEmploymentDate($value);
				break;
			case 14:
				$this->setLocalResident($value);
				break;
			case 15:
				$this->setQualification($value);
				break;
			case 16:
				$this->setStatus($value);
				break;
			case 17:
				$this->setCreatedAt($value);
				break;
			case 18:
				$this->setUpdatedAt($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = EmployeePeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setDepartmentId($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setDesignationId($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setEmpCategory($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setName($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setCnic($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setDob($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setGender($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setMailAddress($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setContactRes($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setContactCell($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setContactOff($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setEmergencyContact($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setEmploymentDate($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setLocalResident($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setQualification($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setStatus($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setCreatedAt($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setUpdatedAt($arr[$keys[18]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(EmployeePeer::DATABASE_NAME);

		if ($this->isColumnModified(EmployeePeer::ID)) $criteria->add(EmployeePeer::ID, $this->id);
		if ($this->isColumnModified(EmployeePeer::DEPARTMENT_ID)) $criteria->add(EmployeePeer::DEPARTMENT_ID, $this->department_id);
		if ($this->isColumnModified(EmployeePeer::DESIGNATION_ID)) $criteria->add(EmployeePeer::DESIGNATION_ID, $this->designation_id);
		if ($this->isColumnModified(EmployeePeer::EMP_CATEGORY)) $criteria->add(EmployeePeer::EMP_CATEGORY, $this->emp_category);
		if ($this->isColumnModified(EmployeePeer::NAME)) $criteria->add(EmployeePeer::NAME, $this->name);
		if ($this->isColumnModified(EmployeePeer::CNIC)) $criteria->add(EmployeePeer::CNIC, $this->cnic);
		if ($this->isColumnModified(EmployeePeer::DOB)) $criteria->add(EmployeePeer::DOB, $this->dob);
		if ($this->isColumnModified(EmployeePeer::GENDER)) $criteria->add(EmployeePeer::GENDER, $this->gender);
		if ($this->isColumnModified(EmployeePeer::MAIL_ADDRESS)) $criteria->add(EmployeePeer::MAIL_ADDRESS, $this->mail_address);
		if ($this->isColumnModified(EmployeePeer::CONTACT_RES)) $criteria->add(EmployeePeer::CONTACT_RES, $this->contact_res);
		if ($this->isColumnModified(EmployeePeer::CONTACT_CELL)) $criteria->add(EmployeePeer::CONTACT_CELL, $this->contact_cell);
		if ($this->isColumnModified(EmployeePeer::CONTACT_OFF)) $criteria->add(EmployeePeer::CONTACT_OFF, $this->contact_off);
		if ($this->isColumnModified(EmployeePeer::EMERGENCY_CONTACT)) $criteria->add(EmployeePeer::EMERGENCY_CONTACT, $this->emergency_contact);
		if ($this->isColumnModified(EmployeePeer::EMPLOYMENT_DATE)) $criteria->add(EmployeePeer::EMPLOYMENT_DATE, $this->employment_date);
		if ($this->isColumnModified(EmployeePeer::LOCAL_RESIDENT)) $criteria->add(EmployeePeer::LOCAL_RESIDENT, $this->local_resident);
		if ($this->isColumnModified(EmployeePeer::QUALIFICATION)) $criteria->add(EmployeePeer::QUALIFICATION, $this->qualification);
		if ($this->isColumnModified(EmployeePeer::STATUS)) $criteria->add(EmployeePeer::STATUS, $this->status);
		if ($this->isColumnModified(EmployeePeer::CREATED_AT)) $criteria->add(EmployeePeer::CREATED_AT, $this->created_at);
		if ($this->isColumnModified(EmployeePeer::UPDATED_AT)) $criteria->add(EmployeePeer::UPDATED_AT, $this->updated_at);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(EmployeePeer::DATABASE_NAME);

		$criteria->add(EmployeePeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Employee (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setDepartmentId($this->department_id);

		$copyObj->setDesignationId($this->designation_id);

		$copyObj->setEmpCategory($this->emp_category);

		$copyObj->setName($this->name);

		$copyObj->setCnic($this->cnic);

		$copyObj->setDob($this->dob);

		$copyObj->setGender($this->gender);

		$copyObj->setMailAddress($this->mail_address);

		$copyObj->setContactRes($this->contact_res);

		$copyObj->setContactCell($this->contact_cell);

		$copyObj->setContactOff($this->contact_off);

		$copyObj->setEmergencyContact($this->emergency_contact);

		$copyObj->setEmploymentDate($this->employment_date);

		$copyObj->setLocalResident($this->local_resident);

		$copyObj->setQualification($this->qualification);

		$copyObj->setStatus($this->status);

		$copyObj->setCreatedAt($this->created_at);

		$copyObj->setUpdatedAt($this->updated_at);


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Employee Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     EmployeePeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new EmployeePeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Department object.
	 *
	 * @param      Department $v
	 * @return     Employee The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setDepartment(Department $v = null)
	{
		if ($v === null) {
			$this->setDepartmentId(NULL);
		} else {
			$this->setDepartmentId($v->getId());
		}

		$this->aDepartment = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Department object, it will not be re-added.
		if ($v !== null) {
			$v->addEmployee($this);
		}

		return $this;
	}


	/**
	 * Get the associated Department object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Department The associated Department object.
	 * @throws     PropelException
	 */
	public function getDepartment(PropelPDO $con = null)
	{
		if ($this->aDepartment === null && ($this->department_id !== null)) {
			$c = new Criteria(DepartmentPeer::DATABASE_NAME);
			$c->add(DepartmentPeer::ID, $this->department_id);
			$this->aDepartment = DepartmentPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aDepartment->addEmployees($this);
			 */
		}
		return $this->aDepartment;
	}

	/**
	 * Declares an association between this object and a Designation object.
	 *
	 * @param      Designation $v
	 * @return     Employee The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setDesignation(Designation $v = null)
	{
		if ($v === null) {
			$this->setDesignationId(NULL);
		} else {
			$this->setDesignationId($v->getId());
		}

		$this->aDesignation = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Designation object, it will not be re-added.
		if ($v !== null) {
			$v->addEmployee($this);
		}

		return $this;
	}


	/**
	 * Get the associated Designation object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Designation The associated Designation object.
	 * @throws     PropelException
	 */
	public function getDesignation(PropelPDO $con = null)
	{
		if ($this->aDesignation === null && ($this->designation_id !== null)) {
			$c = new Criteria(DesignationPeer::DATABASE_NAME);
			$c->add(DesignationPeer::ID, $this->designation_id);
			$this->aDesignation = DesignationPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aDesignation->addEmployees($this);
			 */
		}
		return $this->aDesignation;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
		} // if ($deep)

			$this->aDepartment = null;
			$this->aDesignation = null;
	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseEmployee:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseEmployee::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseEmployee
